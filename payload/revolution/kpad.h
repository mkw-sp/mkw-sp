#pragma once

#include <Common.h>

#include "revolution/wpad.h"

enum {
    KPAD_BUTTON_LEFT = WPAD_BUTTON_LEFT,
    KPAD_BUTTON_RIGHT = WPAD_BUTTON_RIGHT,
    KPAD_BUTTON_DOWN = WPAD_BUTTON_DOWN,
    KPAD_BUTTON_UP = WPAD_BUTTON_UP,
    KPAD_BUTTON_HOME = WPAD_BUTTON_HOME,
};

enum {
    KPAD_CL_BUTTON_UP = WPAD_CL_BUTTON_UP,
    KPAD_CL_BUTTON_LEFT = WPAD_CL_BUTTON_LEFT,
    KPAD_CL_TRIGGER_ZR = WPAD_CL_TRIGGER_ZR,
    KPAD_CL_BUTTON_X = WPAD_CL_BUTTON_X,
    KPAD_CL_BUTTON_A = WPAD_CL_BUTTON_A,
    KPAD_CL_BUTTON_Y = WPAD_CL_BUTTON_Y,
    KPAD_CL_BUTTON_B = WPAD_CL_BUTTON_B,
    KPAD_CL_TRIGGER_ZL = WPAD_CL_TRIGGER_ZL,
    KPAD_CL_RESERVED = WPAD_CL_RESERVED,
    KPAD_CL_TRIGGER_R = WPAD_CL_TRIGGER_R,
    KPAD_CL_BUTTON_PLUS = WPAD_CL_BUTTON_PLUS,
    KPAD_CL_BUTTON_HOME = WPAD_CL_BUTTON_HOME,
    KPAD_CL_BUTTON_MINUS = WPAD_CL_BUTTON_MINUS,
    KPAD_CL_TRIGGER_L = WPAD_CL_TRIGGER_L,
    KPAD_CL_BUTTON_DOWN = WPAD_CL_BUTTON_DOWN,
    KPAD_CL_BUTTON_RIGHT = WPAD_CL_BUTTON_RIGHT,
};

typedef struct KPADStatus {
    u32 buttons;
    u8 _04[0x84 - 0x04];
} KPADStatus;
static_assert(sizeof(KPADStatus) == 0x84);

s32 KPADRead(s32, KPADStatus *status, u32);
// TODO: proper union
void KPADGetUnifiedWpadStatus(s32, WPADCLStatus *, u32);
